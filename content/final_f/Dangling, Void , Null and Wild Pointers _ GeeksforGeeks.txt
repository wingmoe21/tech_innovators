Transcript of the audio for the lecture:
0.086 - 6.65:  Hello friends, today in this video we will discuss about dangling, void, null and wild pointers.
7.69 - 10.252: So, let us start with dangling pointers.
11.412 - 17.856: A pointer pointing to a memory location that has been already deleted is called dangling pointer.
18.776 - 20.697: So, let us see a C program.
22.198 - 29.322: So, what we are doing in this C program, we are allocating some memory into our system
30.481 - 31.261:  of 4 bytes.
32.621 - 35.702: Now malloc will always return a void pointer.
36.322 - 41.483: But we are storing it into a pointer which is pointing to an integer variable.
42.403 - 44.624: So we will typecast into int star.
45.344 - 48.584: So memory map of this line will be like this.
49.825 - 51.465: So ptr is equal to 100.
51.505 - 56.146: 100 is the base address of the memory which is allocated by malloc.
57.086 - 57.186: Ok.
57.924 - 61.865:  and ptr will be stored at 700 which we have assumed.
63.146 - 81.572: Now in the second line free ptr so free will deallocate the memory which is pointing by this pointer so this ptr is pointing to this memory and this memory is of 4 bytes so it will be deleted from our system.
82.793 - 86.154: Now our ptr is containing 100 as the value
86.932 - 92.716:  and 100 is the base address of this deallocated memory or freed memory.
93.576 - 97.018: That's why this pointer is known as dangling pointer.
97.578 - 103.182: Because this pointer is pointing to a memory location that has been already deleted.
104.222 - 104.463: Okay.
105.083 - 107.605: Now in the third line, ptr is equal to null.
108.585 - 113.948: Now ptr value will be null or will be initialized to null.
114.229 - 116.57: It means now it is not a dangling pointer.
116.966 - 120.267:  because its value has been null.
123.809 - 125.929: So let us start with next example.
126.07 - 132.632: This is also an example of dangling pointer but in another instant or in another conditions.
134.633 - 136.073: So this is our main function.
137.374 - 145.517: So in the main function what we are doing we are calling a fun function and this fun function will return an address.
147.484 - 150.045:  So, let us start with the memory map of this program.
151.606 - 153.646: So, see this is our stack memory.
154.247 - 158.208: So, whenever main function will be called, a context will be formed.
158.908 - 163.95: And in this context, p is equal to fun.
164.31 - 169.512: So, fun function will be called in the second context of this stack memory.
170.712 - 176.294: And in the fun function, a local object will be created.
176.932 - 204.597:  or we can say a local variable x will be created and x value will be 5 and let us assume it has been stored at address 100 now when it will return 100 as the value okay so this context will be deleted from our system and p is equal to 100 now now when it will fetch the value at address 100
206.423 - 236.035:  what it will give it will give us a garbage value why because this local memory has been already deleted and now this p pointer is pointing to a memory location which has been already deleted it means it will give a garbage value so let us start with the next example now the example is same but data type of x has been changed to static
237.011 - 238.492:  So what is the meaning of static?
238.712 - 244.674: Static means now this x variable will not be stored into our local memory or stack memory.
245.475 - 250.137: Now it will be stored into our global memory, not in local memory.
250.717 - 264.723: Okay, so whenever this function will be called, it will go into the second context of the second means stack memory and when it will return x means address of x.
265.663 - 291.823:  so it will return 100 as the value and this 100 will go here now when it will fetch the value which is present at address 100 so what it will fetch it will fetch value 5 only because now this memory has not been deleted when this context will be deleted okay because it is stored into our global memory so value will be 5 now we will discuss void pointer
292.591 - 296.374:  So void pointer is a type of pointer not the value of a pointer.
297.055 - 298.656: So this is a very important point.
299.296 - 299.537: OK.
300.077 - 312.907: So how void pointer is important because void pointer can store address of any data type and to fetch the value of that data type we have to typecast it according to that data type.
313.868 - 318.432: So let us see int x is equal to 4 float y is equal to 5.5.
319.353 - 322.355: Now what we are doing we are creating a void pointer.
323.464 - 353.239:  and in the void pointer first of all we are initializing it with the address of x and x is of int type now to fetch the value of int x what we will do we will typecast it into int star so it will give value 4 and to fetch the value of y using this pointer what we will do we will store the address of y here into the pointer after that we will typecast it into float star
353.874 - 382.437:  now it will give 5.5 so now we will discuss null pointer and wild pointer so what is the meaning of a null pointer when pointer value is null okay then it is known as null pointer let us see int star ptr is equal to null so whenever we will print this ptr it will give us zero as the value because null is a macro defined in c language
383.388 - 385.59:  and it is zero only.
387.331 - 389.112: So, next pointer is wild pointer.
389.212 - 390.793: What is the meaning of wild pointer?
391.414 - 393.275: Uninitialized value of a pointer.
394.135 - 412.608: So, let us see in the second program int x is equal to 10 and before this int star p but here p has not been initialized till now it means it is wild pointer but when p is equal to address of x now p is not a wild pointer because it is
413.021 - 414.204:  initialized already.
416.47 - 417.352: Thank you for watching.


The content from the lecture slides:
Page 1: The slide presents a question on how to deallocate dynamic memory without using the "free()" function. The solution offered is to use the "realloc()" function from the standard library. The syntax for "realloc()" is given as "void *realloc(void *ptr, size_t size);". It notes that if the "size" argument is zero, then the call to realloc will effectively free the memory pointed to by "ptr". If "ptr" is NULL and size is non-zero, the call to realloc acts like a "malloc(size)" call.

Page 2: This slide shows a simple C program that illustrates a code with a memory leak. The program allocates memory using "malloc()" but does not free it. The slide includes output from the Valgrind tool, reporting a memory leak of 10 bytes that were not freed.

Page 3: Here, we see an update to the previous program, where "realloc()" is used with a size argument of zero to deallocate the memory that was initially allocated with "malloc()". Following this change, Valgrind output confirms that all heap blocks were freed, indicating no memory leaks.

Page 4: This is identical to Page 3, reiterating that using realloc with a size of zero effectively frees the allocated memory, as evidenced by the Valgrind output showing no memory leaks.

Page 5: The slide seems to be a thank you message indicating the end of the presentation, asking viewers for comments. No technical content is present on this page.

Page 6: A function is displayed on the left, "octalToDecimal(int n)", which converts an octal number to decimal. The right side of the slide shows a step-by-step dry run of this function using the octal number 123, and demonstrates how the decimal value 83 is derived.

Page 7: This slide appears to be the same end-of-presentation message as in Page 5, with a thank you to viewers and a request for comments.
Program ...
#include<stdio.h>
/* Apply the constructor attribute to myStartupFun() so that it
is executed before main() */
void myStartupFun (void) _attribute_ ((constructor));
/* Apply the destructor attribute to myCleanupFun() so that it
is executed after main() */
void myCleanupFun (void) __attribute___ ((destructor));
/* implementation of myStartupFun */
void myStartupFun (void)
{
}
/* implementation of myCleanupFun */
void myCleanupFun (void)
{
}
int main (void)
{
}
printf ("startup code before main()\n");
printf ("cleanup code after main()\n");
printf ("hello\n");
return 0;AutoSave Off HEE
File Home Insert Design Transitions Animations
From From Present Custom Slide
Beginning Current Slide Online- Show-
Start Slide Show
1
2
3
DG
Slide 1 of 3
OG Thank you for watching!
0
e
Set Up
Slide Show
Hide
Slide
Click to add notes
зес
Slide Show Review
Rehearse Record Slide
Timings Show -
Set Up
S
View Help
Play Narrations
Use Timings
Show Media Controls
DG
functions
Storyboarding
Monitor: Automatic
✓Use Presenter View
Tell me what you want to do
Microsoft PowerPoint
Monitors
Keep
Want to keep your ink annotations?
Distid
Functions that are executed
before and after main() in C
Notes
A Vishal Gulia
01
00
Share
ই AD ক4)
Comments
+76% 5
8:49 PM
4/11/2019AutoSave Off HE
File Home Insert Design Transitions Animations Slide Show Review
From
From Present Custom Slide
Beginning Current Slide Online- Show-
Start Slide Show
1
2
3
DG
Slide 2 of 3
OG Thank you for watching!
0
e
Set Up
Slide Show
Hide
Slide
Click to add notes
зес
Rehearse Record Slide
Timings Show-
Set Up
Program ...
#include<stdio.h>
View Help Storyboarding Tell me what you want to do
Play Narrations
Use Timings
Show Media Controls
/* Apply the constructor attribute to myStartupFun() so that it
is executed before main() */
void myStartupFun (void) _attribute_ ((constructor));
/* implementation of myStartupFun */
void myStartupFun (void)
{
printf ("startup code before main()\n");
}
/* implementation of myCleanupFun */
void myCleanupFun (void)
{
}
int main (void)
{
}
/* Apply the destructor attribute to myCleanupFun() so that it
is executed after main() */
void myCleanupFun (void)_attribute_ ((destructor));
S
functions
Monitor: Automatic
Use Presenter View
printf ("cleanup code after main()\n");
printf ("hello\n");
return 0;
Monitors
Notes
01
A Vishal Gulia
00
Share
^ 4¹))
Comments
+76% 5
8:49 PM
4/11/2019AutoSave Off HEE
File Home Insert Design Transitions Animations Slide Show
From
Beginning
1
2
3
Slide 2 of 3
16
E
Play Narrations
Use Timings
Prom
CUsers\gulia Documents personal documents Printers basic.cpReNeteketord Slide
researchOrWiew-Encosting Languagsliettings Tenise Macrom Rus Plugins Window Show Media Controls
Start Side Stick
#include<stdio.h>
2277~~~~3
5/* Apply the constructor attribute Program
is executed before main () */ #include<stdio.h>
void myStartupFun (void) __attribute_ ((constructor));
/* implementation of myStartupFun */
void myStartupFun (void)
Thank you for watching
/* implementation of myCleanupFun /
20 void myCleanupFun (void)
21 (
22
23 }
24
25 int main (void)
26 B{
27
28
29
30
source file
Review
printf ("hello\n");
return 0;
/* implementation of myStartupFun */
printf ("startup code before main(StartupFun (void)
Click to add notes
View Help
myStartupFun() so that it
printf ("cleanup code after main () \n");
/* Apply the destructor attribute to mycleanupFun
to my startupFun (s) ttribute_ ((constructor));
is executed after main () */
void myCleanupFun (void) __attribute___ ((destructor)); attribute to myCleanupFun() so that it
is executed after main() */
void myCleanupFun (void) _attribute_ ((destructor));
}
er S
/* implementation of myCleanupFun */
void myCleanupFun (void)
}
int main (void)
{
printf ("startup code before main()\n");
Storyboarding
Apply the constructor attribute to myStartupFun() so that it
is executed before main() */
functions
Monitor: Automatic
✔Use Presenter View
printf ("cleanup code after main()\n");
printf ("hello\n");
return 0;
Tell me what you want to do
Monitors
basic.cpp
length: 635 lines:30
Ln: 30 Col: 1 Sel: 010
Notes
A Vishal Gulia
Windows (CRLF)
Share
UTF-8
AD (4)
Comments
X
+76%
IN$3:49 PM
4/11/2019
>«»>>C:\Users\vgulia\Documents\personal_documents\C_Pointers\basic.cpp - Notepad++
File Edit Search View Encoding Language Settings Tools Macro Run Plugins Window ?
80
OPC's
new 2 X cmd bat X create bd X syncobi pending.txt7cdefxtsyncob_fence.txt X gpu_info.py X
1 #include<stdio.h>
2
2345
5
6
7
8
9
10 void myCleanupFun (void)
11
12
13 /* implementation of myStartupFun */
14 void myStartupFun (void)
15 B{
1222223
/* Apply the constructor attribute to myStartupFun () so that it
is executed before main () */
void myStartupFun (void) _attribute_ ((constructor));
+567
/* Apply the destructor attribute to myCleanupFun () so that it
is executed after main () */
16
17 }
18
19 /* implementation of myCleanupFun */
20 void myCleanupFun (void)
21 B{
22
23 }
24
27
28
29
30
printf ("startup code before main () \n");
25 int main (void)
26 B{
C++ source file
_attribute_
printf ("cleanup code after main () \n");
printf ("hello\n");
return 0;
e
((destructor));
Ĥers
gpu_info.bt X
inputh X
basic.cpp X
length: 635 lines: 30
Ln: 30 Col: 1 Sel: 010
Windows (CRLF)
I
UTF-8
^ D (4»)
8:49 PM
4/11/2019
INS
XC:\Users\vgulia\Documents personal documents\C_Pointers basic.cpp - Notepad++
File Edit Search View Encoding Language Settings Tools Macro Run Plugins Window?
D'a
new 2 CAN WS\system3ndex_coding bd 23 Todell123yncribi funct
1
#include<stdio.h>
1234SSTO123
5
2222
6
7
1222223
10 void myCleanupFun (void) __attribute_ ((destructor));
11
8 /* Apply the destructor attribute to myCleanupFun () so that it
9 is executed after main () */
12
13 /* implementation of myStartupFun */
14 void myStartupFun (void)
15 B{
16
17 ·}
18
19 /* implementation of myCleanupFun */
20 void myCleanupFun (void)
21 B{
22
23 }
24
/* Apply the constructor attribute to myStartupFun () so that it
is executed before main () */
void myStartupFun (void) _attribute_ ((constructor));
567890
27
25 int main (void)
26 B{
28
29
30
printf ("startup code before main () \n");
C++ source file
printf ("cleanup code after main () \n");
printf ("hello\n");
return 0;
The name of a prop foldes document in
e
e
S
gou no X
basic.cpp X
length: 635 lines : 30
Ln: 19 Col:37 Sel: 010
UTF-8
^ D (4¹)
Windows (CRLF)
8:49 PM
4/11/2019
INS
XC:\Users\vgulia\Documents personal documents\C_Pointers basic.cpp - Notepad++
File Edit Search View Encoding Language Settings Tools Macro Run Plugins Window ?
HARGA hse Do
C:\WINDOWS\system32\cmd.exe
new 2 X
1 Microsoft Windows [Version 10.0.16299.1029]
(c) 2017 Microsoft Corporation. All rights reserved.
2
3
4
5
6
1222223
1567690
7
8 B* Apply the destructor attribute to myCleanupFun () so that it
9 Ls executed after main () */
10
void myCleanupFun (void) _attribute_ ((destructor));
11
12
13
14 void myStartupFun (void)
15 81
16
17
18
19
20 void myCleanupFun (void)
21 B
22
23
24
27
28
Apply the constructor attribute to myStartupFun() so that it
C:\Users\vgulia before main () */
void myStartupFun (void) _attribute_ ((constructor));
29
B
30
25 int main (void)
26 B
implementation of myStartupFun */
printf ("startup code before main ()\n");
* implementation of myCleanupFun */
C++ source file
printf ("cleanup code after main () \n");
printf ("hello\n");
return 0;
e
es
ABC
length: 635 lines.30
Ln:19 Col.37 Sel:010
Windows (CRLF)
UTF-8
^ D (4¹)
X
8:49 PM
4/11/2019
INS
XC:\Users\vgulia Documents personal_documents\C_Pointers\basic.cpp - Notepad++
File Edit Search View Encoding Language Settings Tools Macro Run Plugins Window?
C:\WINDOWS\system32\cmd.exe
new 2
1
2
3 C:\Users\vguliaonstructor attribute to myStartupFun () so that it
4
is executed before main () */
5
void myStartupFun (void) _attribute_ ((constructor));
6
7
8
9
10
11
12
13 /* implementation of myStartupFun */
Microsoft
[Version 10.0.16299.1029]
(c) 2017 Michal Corporation. All rights reserved.
4567
/* Apply the destructor attribute to myCleanupFun () so that it
is executed after main () */
void myCleanupFun (void) _attribute_ ((destructor));
14 void myStartupFun (void)
15 B{
16
17 }
18
19
20 void myCleanupFun (void)
21 E{
22
23 }
24
/* implementation of myCleanupFun */
26 B{
27
28
29
30
25 int main (void)
}
printf ("startup code before main () \n");
C++ source file
Q
printf ("cleanup code after main () \n");
printf ("hello\n");
return 0;
e
e
ARC..
length:635 lines:30
In:19 Col:37 Sel:010
Windows (CRLF)
UTF-8
^ D (4¹)
X
O
8:49 PM
4/11/2019
INS
XAutoSave Off HE
File Home Insert Design Transitions Animations Slide Show Review View Help Storyboarding
From
From Present Custom Slide
Beginning Current Slide Online- Show
Start Slide Show
1
2
3
DG
Slide 2 of 3
OG Thank you for watching!
0
e
Set Up
Slide Show
Hide
Slide
Click to add notes
ег
Rehearse Record Slide
Timings Show-
Set Up
Program ...
#include<stdio.h>
Play Narrations
Use Timings
Show Media Controls
/* implementation of myStartupFun */
void myStartupFun (void)
{
printf ("startup code before main()\n");
}
/* implementation of myCleanupFun */
void myCleanupFun (void)
{
}
int main (void)
{
}
/* Apply the constructor attribute to myStartupFun() so that it
is executed before main() */
void myStartupFun (void) _attribute_ ((constructor));
S
/* Apply the destructor attribute to myCleanupFun() so that it
is executed after main() */
void myCleanupFun (void) _attribute_ ((destructor));
functions
Monitor: Automatic
Use Presenter View
Tell me what you want to do
printf ("cleanup code after main()\n");
printf ("hello\n");
return 0;
Monitors
Notes
01
A Vishal Gulia
88
Share
Comments
+76% 5
8:50 PM
4/11/2019AutoSave Off HE
File Home Insert Design Transitions Animations Slide Show Review View Help
From
From Present Custom Slide
Beginning Current Slide Online- Show
Start Slide Show
1
N
3
DG
Slide 3 of 3
OG Thank you for watching!
e
Set Up
Slide Show
Hide Rehearse Record Slide
Slide Timings Show-
Set Up
Click to add notes
ег S
Play Narrations
Use Timings
Show Media Controls
functions
Storyboarding Tell me what you want to do
Monitor: Automatic
Use Presenter View
DG
Monitors
Thank you for watching!
Please leave us your comments.
Notes
01
A Vishal Gulia
88
Share
Comments
▸ «»
+76% 5
8:50 PM
4/11/2019