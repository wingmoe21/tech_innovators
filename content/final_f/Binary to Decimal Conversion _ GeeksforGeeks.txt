Transcript of the audio for the lecture:
0.228 - 2.23:  Hello friends, welcome to GeeksforGeeks.
2.71 - 7.675: In this tutorial, we are going to see how to convert a binary number to a decimal number.
8.336 - 17.504: A binary number is a number expressed in the base 2 numeral system or binary numeral system, which uses only two symbols that are 0 and 1.
18.265 - 25.491: Whereas a decimal number is a number expressed in the base 10 and requires 10 different numerals, the digits 0 to 9.
26.511 - 30.493:  Now let us look at the algorithm to convert a binary number to a decimal number.
31.293 - 31.833: Step 1.
32.273 - 40.017: Multiply each digit separately from left to right by 2 raised to power 0, 2 raised to power 1, 2 raised to power 2 and so on.
40.537 - 42.158: Suppose we have a binary number 110.
43.458 - 48.04: So we take the leftmost number and multiply it by 2 raised to power 0.
48.44 - 52.622: Then the next number and multiply it by 2 raised to power 1 and so on.
53.297 - 61.039:  We obtained 0 into 2 raised to power 0 as 0, 1 into 2 raised to power 1 as 2, 1 into 2 raised to power 2 as 4.
61.759 - 62.339: Step number 2.
62.96 - 65.1: Add all the results coming from step number 1.
65.8 - 68.941: So we add 4 plus 2 plus 0 which equals 6.
69.561 - 72.702: The step 3 provides us with the equivalent decimal number.
73.222 - 74.563: Now let us look at the code.
75.603 - 82.485: Here is a function binary to decimal in which we have passed a binary number and it returns its decimal equivalent.
83.248 - 87.289:  We initialized decimal value as 0 and base as 1.
88.03 - 89.63: 1 which is 2 raised to power 0.
90.35 - 92.311: We initialized temp as num.
92.791 - 96.252: Now we run a while loop until temp is not equal to 0.
97.192 - 101.414: We extract the last digit from temp and place it in last digit.
101.934 - 105.815: Then we change the value of temp by dropping off its last digit.
106.475 - 111.117: We multiply the last digit with base and add it to the decimal value.
111.687 - 114.688:  Then we change the value of base by multiplying it by 2.
115.628 - 118.688: We continue these steps until the while loop runs i.e.
118.768 - 120.789: until temp is not equal to 0.
121.069 - 124.849: In the end, we return decimal value which is its decimal equivalent.
125.97 - 128.01: Let us see the dry run with an example.
128.67 - 130.57: Suppose the input is 110.
131.01 - 131.951: The output should be 6.
132.851 - 134.151: The value of num will be 110.
135.391 - 137.252: The value of decimal value will be 0.
138.092 - 139.512: The value of base will be 1.
140.177 - 141.678:  and the value of temp will be 110.
142.899 - 146.423: We will enter the while loop as the value of temp is not equal to 0.
147.363 - 152.128: The value of last digit will be the value of the last digit of temp that is 0.
152.848 - 156.712: The value of temp will be changed and the last digit of temp will be dropped.
157.252 - 158.834: Therefore, 110 will become 11.
159.954 - 165.119: The decimal value will be 0 as last digit into base which is 1 into 0 is 0.
166.673 - 169.874:  The value of base will be doubled so 1 will become 2.
170.654 - 174.416: Now we will continue the while loop as temp is still not equal to 0.
175.236 - 179.777: Now the value of last digit will be 1 as the value last digit of temp is 1.
180.578 - 183.379: The value of temp will be changed from 11 to 1.
184.179 - 189.781: Decimal value will now become 2 as last digit into base that is 2 into 1 equals 2.
190.721 - 193.262: The value of base will be doubled from 2 to 4.
194.403 - 198.647:  We will continue with the while loop as the value of temp is still not equal to 0.
199.727 - 204.131: Now the last digit will be equal to 1 and the value of temp will become 0.
205.012 - 211.117: The decimal value will become 6 as 4 into 1 is 4 plus 2 equals 6.
211.697 - 215.801: We will double the value of base by 2 that is from 4 to 8.
216.381 - 221.786: Now the value of temp is 0 therefore we will not continue with the while loop and exit the while loop.
222.461 - 224.505:  Now we will return the decimal value that is 6.
225.647 - 227.009: I hope you understood the code.
228.412 - 229.313: Thank you for watching.
229.474 - 230.596: Please leave us your comments.


The content from the lecture slides:
Page1: This page is introducing the basics of function pointers in C programming. It explains two declarations of function pointers:
1. `int *foo(int)` signifies that `foo` is a function which takes an integer as an argument and returns a pointer to an integer.
2. `int (*foo)(int)` indicates that `foo` is a pointer to a function that takes an integer as an argument and returns an integer.

Page2: This page presents a simple C program that demonstrates the use of a function pointer. Initially, a function `fun` is defined to take an integer argument and print its value. In the `main` function, a function pointer `fun_ptr` is declared and set to point to `fun`. It is highlighted that this can be done in a single line with `void (*fun_ptr)(int) = &fun;` or by separating the declaration and assignment into two lines:
```
void (*fun_ptr)(int);
fun_ptr = &fun;
```
Finally, the function `fun` is called through the function pointer using `(*fun_ptr)(10);`, which will print the value of `a` (10) to the output.

Page3: This page simply thanks the viewer for watching and invites them to leave comments, suggesting that it is the end of the presentation or video.Page 1: The slide explains the basics of function pointers in C. It defines two cases. First, 'int *foo(int)' means that foo is a function accepting an integer argument and returning a pointer to an integer. Second, 'int (*foo)(int)' indicates that foo is a pointer to a function which accepts an integer as an argument and returns an integer.

Page 2: This slide provides a hands-on example of how to use function pointers in C. It includes a simple program with a function 'fun' that takes an integer parameter and prints its value. The program then demonstrates how to declare a function pointer 'fun_ptr', assign it the address of the 'fun' function, and invoke 'fun' using 'fun_ptr' with 10 as the argument. The commented section shows an alternative, equivalent way of assigning the function's address to the function pointer.

Page 3: The slide displays a closing message thanking viewers for watching and asks for comments.Page1: The slide explains the basics of function pointers in C. The first point describes that the syntax "int *foo(int)" defines 'foo' as a function that takes an integer as an argument and returns a pointer to an integer. The second point clarifies that "int (*foo)(int)" makes 'foo' a pointer to a function that accepts an integer as an argument and returns an integer.

Page2: This slide provides a programming example showcasing how to declare and use function pointers in C. The code defines a simple function 'fun' that takes an integer argument and prints its value. In the 'main' function, a pointer to the 'fun' function is declared with the name 'fun_ptr'. This pointer is then assigned the address of 'fun' using the '&' operator, and the function 'fun' is subsequently called through the pointer using the syntax "(*fun_ptr)(10);", which passes the integer value 10 to 'fun' via the function pointer.

Page3: The slide appears to be a closing slide with the text "Thank you for watching! Please leave us your comments." This signifies the end of the presentation or video.Page1: The slide introduces the basics of function pointers in C/C++. It describes two key concepts:
1. `int *foo(int)` indicates that `foo` is a function that accepts an integer argument and will return a pointer to an integer.
2. `int (*foo)(int)` indicates that `foo` is a pointer to a function which accepts an integer as an argument and will return an integer.

Page2: This slide provides a code example illustrating the use of function pointers in C. It includes the declaration and definition of a simple function `void fun(int a)` that prints the value of its integer argument. Then in the `main` function, a pointer to the `fun` function, named `fun_ptr`, is declared and initialized. The code has a comment that indicates two ways to associate the pointer with the function: by direct initialization or by separate declaration and assignment. Finally, the code demonstrates how to call the function using the function pointer `fun_ptr` by passing the integer value 10 to it.

Page3: The last image is a closing slide with a logo that appears to be 'GeeksforGeeks' (based on the 'g' design), thanking viewers for watching and inviting them to leave comments.
Int a[9] = a[0]=11 | a[1]=12|a[2]=13 |a[3]=14|a[4]=15 a[5]=16 a[6]=17|a[7]=18|a[8]=19
a = 1000
1000
1004
1008
Array name(a) contains the base address of
the array(1000).
*1000 ➜ a[0] →[0]a ⇒11
*(1000+1)→ *(1004) ⇒a[1] ⇒1[a] ⇒ 12
*(1000+2) → *(1008) → a[2] ⇒2[a] ⇒13
*(1000+3) → *(1012) ⇒ a[3] ⇒3[a] →14
*(1000+4) → *(1016) ➜ a[4] →4[a] →15
*(1000+5) → *(1020) → a[5] →5[a] ⇒16
*(1000+6) → *(1024) ➜ a[6] →6[a] →17
*(1000+7) → *(1028) ⇒ a[7] →7[a] →18
*(1000+8) → *(1032) ⇒ a[8] →8[a] →19
1012
1016
1020
1024
1028
1032
Note: Compiler change both the representation into
pointer form.2013
Home Insert Design Transitions
Y
From From Present Custom Slide
Beginning Current Slide Online- Show-
Start Slide Show
File
1
2
3
AutoSave Off
4
DG
Slide 2 of 4
An Uncommon
presentation of
OG Thank you for watching!
03
Animations
Set Up
Slide Show
Hide
Slide
Click to add notes
e
Slide Show Review
Rehearse Record Slide
Timings Show -
Set Up
View Help
uncommon representation_of_array
Play Narrations
Use Timings
Show Media Controls
1000
Storyboarding Tell me what you want to do
Monitor: Automatic
Use Presenter View
Int a[9] = a[0]=11|a[1]=12|a[2]=13|a[3]=14
1004
1008
Monitors
a = 1000
Array name(a) contains the base address of
the array(1000).
*1000 ➜ a[0] →[0]a →11
*(1000+1) → *(1004) ➜a[1] ⇒1[a] → 12
*(1000+2)→ *(1008) ➜ a[2] ⇒2[a] →13
*(1000+3)→ *(1012) ➜a[3] →3[a] →14
*(1000+4)*(1016) → a[4] →4[a] →15
*(1000+5)*(1020) → a[5] →5[a] →16
*(1000+6) → *(1024) → a[6] →6[a] →17
*(1000+7) →*(1028) → a[7] →7[a] →18
*(1000+8) → *(1032) ➜a[8] ⇒8[a] →19
1012
a[4]=15 a[5]=16 a[6]=17 a[7]=18 a[8]=19
1016 1020 1024
1028 1032
Note: Compiler change both the representation into
pointer form.
Notes
10
88
Vishal Gulia
Share
Comments
«»
+76% 3
4:00 PM
3/11/2019AutoSave Off H13
File Home Insert Design Transitions
甲 58
From
From Present Custom Slide
Set Up
Hide Rehearse Record Slide
Beginning Current Slide OnlinecumenShow.onal_doc Slide Show SlidesiccTimingspad Show
File Start Slide Show View Encoding Language Settings Tools Macro Run Set Ups Window ?
KLOPCE
basic cpp
1
2
3
4
DG
Slide 2 of 4
02
contdio.h>
presentation of
file
int arr[21:
arr [0] =
OG Thank you for watching!
2;
arr [3] = 3;
printf("\n",0[arr]);
printf(d\n",1 [arz]);
printf(2[arr]);
e
Animations Slide Show Review View Help
Play Narrations
Use Timings
Show Media Controls
Click to add notes
uncommon representation_of_array
1000
Storyboarding Tell me what you want to do
e
Int a[9] = a[0]=11 a[1]=12 a[2]=13 a[3]=14 a[4]=15 a[5]=16 a[6]=17 a[7]=18 a[8]=19
1020
Monitor: Automatic
Use Presenter View
1004
1008
Monitors
a = 1000
Array name(a) contains the base address of
the array(1000).
*1000 ➜ a[0] →→[0]a →11
*(1000+1)→ *(1004) ➜a[1] →1[a] → 12
*(1000+2)→ *(1008) ➜a[2] →2[a] →13
*(1000+3)→ *(1012) → a[3] →3[a] →14
*(1000+4)*(1016) ➜a[4] →4[a] →15
*(1000+5)*(1020)→a[5] →5[a] →16
*(1000+6) → *(1024) → a[6] →6[a] →17
*(1000+7)→ *(1028) → a[7] →7[a] →18
*(1000+8) → *(1032) → a[8] ⇒8[a] →19
1012
1016
1024
lengur 205 lines: 14
1028
Note: Compiler change both the representation into
pointer farm
Ln: 10 Col:27 Sel: 010
1032
Notes
Windows (CRLF)
Vishal Gulia
UTF-8
Share
INS
Comments
+76% 53
4:00 PM
3/11/2019C:\Users\vgulia\Documents\personal_documents\C_Pointers\basic.cpp - Notepad++
File Edit Search View Encoding Language Settings Tools Macro Run Plugins Window ?
UPC
basic.cpp X
gpu_info.py gpu_info.bxt X
1 #include<stdio.h>
2 int main()
3
B{
34567890123
LLL
10
11
12
13 }
14
C++ source file
int arr [2];
arr [0] = 1;
arr [1] = 2;
arr [2] = 3;
printf("%d\n",0[arr]);
printf("%d\n",1 [arr]);
printf("%d\n", 2 [arr]);
e
ег
O
length: 205 lines: 14
Ln: 10 Col:27 Sel: 010
Windows (CRLF)
UTF-8
I
4:00 PM
3/11/2019
X
INS
XC:\Users\vgulia\Documents\personal_documents\C_Pointers\basic.cpp - Notepad++
*
pc
gpu_info.py Xgpu_info.txt X basic.cpp X
1
#includecatdin ha
2 int ma: C:\WINDOWS\system32\cmd.exe
3 (
2345678SOH23
9
10
11
12
13
EPC
}
Recycle Bin
ITSD
in arr [2];
ar: [0] = 1;
ar: [1] = 2;
printf("%d\n",0[arr]);
Google Chrome
printf(d\n [ar]);
C++ source file
IT Service Desk
e
C:\WINDOWS\system32\cmd.exe
e
014
01
ABC
C:\WINDOWS\system32\c..... X
N
nes: 13
Ln:8 Col:27 Sel: 010
Windows (CRLF)
UTF-8
WINS
4:01 PM
3/11/2019C:\Users\vgulia\Documents personal_documents\C_Pointers\basic.cpp - Notepad++
File Edit Search View Encoding Language Settings Tools Macro Run Plugins Window ?
gpu_info.py X gpu_info txt basic.cpp X
1 #includecatdio ha
2345 TOHN3
3 (
6
7
8
9
10
11
12
int ma: C:\WINDOWS\system32\cmd.exe
13
}
C++ source file
in
ar
C:\Users\vgulia\Documents\personal_documents\C_Pointers>
arz[1] = 2;
printf("%d\n",0[arr]):
printf("\n", [arr]);
I
length: 166 lines: 13
Ln:8 Col:27 Sel: 010
T
X
Windows (CRLF)
UTF-8
4:01 PM
3/11/2019
X
INS
XC:\Users\vgulia\Documents personal_documents\C_Pointers\basic.cpp - Notepad++
File Edit Search View Encoding Language Settings Tools Macro Run Plugins Window ?
OPC
basic.cpp X
gpu_info.py gpu_info.txt X
1 #include<stdio.h>
2 int main() C:\WINDOWS\system32\cmd.exe
3 (
4
5
7
8
9
10
11
12 }
13
C++ source file
int ar
arr [0]
C:\Users\vgulia\Documents\personal_documents\C_Pointers>g++ basic.cpp -o basic
printfC:\Users\vgulia\Documents\personal_documents\C_Pointers>basic.exe
printf d\n",1 [arr]);
C:\Users\vgulia\Documents\personal_documents\C_Pointers>
ег
N
length: 166 lines: 13
Ln:8 Col:27 Sel: 010
T
Windows (CRLF)
UTF-8
4:01 PM
3/11/2019
X
INS
XC:\Users\vgulia\Documents personal_documents\C_Pointers\basic.cpp - Notepad++
File Edit Search View Encoding Language Settings Tools Macro Run Plugins Window ?
BUC
gpu_info.py gpu_info.txt X basic.cpp X
1
#include<stdio.h>
int main()
23456aOHN3
3 (
7
8
TELE
9
10
11
12
13
}
C++ source file
int arr [2];
arr [0] = 1;
arr [1] = 2;
C:\WINDOWS\system32\cmd.exe
C:\Users\vgulia\Documents\personal_documents\C_Pointers>g++ basic.cpp -o basic
printf("%d\n",0[C:\Users\vgulia\Documents\personal_documents\C_Pointers>basic.exe
printf("%d\n",1[₁]);
2
C:\Users\vgulia\Documents\personal_documents\C_Pointers>
Aer
e
ABC
N
O
length: 166 lines: 13
Ln:8 Col:27 Sel: 010
X
Windows (CRLF)
UTF-8
4:01 PM
3/11/2019
X
INS
XC:\Users\vgulia\Documents personal_documents\C_Pointers\basic.cpp - Notepad++
File Edit Search View Encoding Language Settings Tools Macro Run Plugins Window ?
UPC
gpu_info.py gpu_info.txt X basic.cpp X
1 #include<stdio.h>
int main()
23456aOHN3
3 (
7
8
TELE
9
10
11
12
13
}
C++ source file
int arr [2];
arr [0] = 1;
arr [1] = 2;
C:\WINDOWS\system32\cmd.exe
C:\Users\vgulia\Documents\personal_documents\C_Pointers>g++ basic.cpp -o basic
printf("%d\n",0[arrc:\Users\vgulia\Documents\personal_documents\C_Pointers>basic.exe
printf("%d\n",1 [arr
C:\Users\vgulia\Documents\personal_documents\C_Pointers>
e
e
O
length: 166 lines: 13
Ln:8 Col:27 Sel: 010
Windows (CRLF)
X
UTF-8
4:01 PM
3/11/2019
X
INS
XC:\Users\vgulia\Documents personal_documents\C_Pointers\basic.cpp - Notepad++
File Edit Search View Encoding Language Settings Tools Macro Run Plugins Window ?
UPC
gpu_info.py gpu_info.txt X basic.cpp X
1 #include<stdio.h>
2 int main()
3
(
34567890123
10
TELE
11
12 }
13
C++ source file
int arr [2];
arr [0] = 1;
arr [1] = 2;
printf("%d\n",0[arr])
printf("%d\n",1 [arr]))
C:\WINDOWS\system32\cmd.exe
C:\Users\vgulia\Documents\personal_documents\C_Pointers>g++ basic.cpp -o basic
C:\Users\vgulia\Documents\personal_documents\C_Pointers>basic.exe
C:\Users\vgulia\Documents\personal_documents\C_Pointers>
A e
e
O
length: 166 lines: 13
Ln:8 Col:27 Sel: 010
T
0
Windows (CRLF)
UTF-8
4:01 PM
3/11/2019
X
INS
XC:\Users\vgulia\Documents personal_documents\C_Pointers\basic.cpp - Notepad++
File Edit Search View Encoding Language Settings Tools Macro Run Plugins Window ?
OPC
gpu_info.py gpu_info.txt X basic.cpp X
1
#include<stdio.h>
int main()
23456aOHN3
3 (
7
8
TELE
9
10
11
12
13
}
C++ source file
int arr [2];
arr [0] = 1;
arr [1] = 2;
printf("%d\n",0 [arz]):
printf("%d\n",1[arr]); 1
C:\WINDOWS\system32\cmd.exe
C:\Users\vgulia\Documents\personal_documents\C_Pointers>g++ basic.cpp -o basic
C:\Users\vgulia\Documents\personal_documents\C_Pointers>basic.exe
C:\Users\vgulia\Documents\personal_documents\C_Pointers>
A e
e
O
length: 166 lines: 13
Ln: 8 Col:27 Sel: 010
0
Windows (CRLF)
UTF-8
4:01 PM
3/11/2019
X
INS
XC:\Users\vgulia\Documents personal_documents\C_Pointers\basic.cpp - Notepad++
File Edit Search View Encoding Language Settings Tools Macro Run Plugins Window ?
OPC
gpu_info.py gpu_info.txt X basic.cpp X
1 #include<stdio.h>
2
34567890123
3
TELE
10
11
12
13
int main()
(
}
C++ source file
int arr [2];
arr [0] = 1;
arr [1] = 2;
C:\WINDOWS\system32\cmd.exe
C:\Users\vgulia\Documents\personal_documents\C_Pointers>g++ basic.cpp -o basic
ABC
printf("%d\n",0 [arr]); C:\Users\vgulia\Documents\personal_documents\C_Pointers>basic.exe
printf("%d\n",1 [arr]); 1
2
C:\Users\vgulia\Documents\personal_documents\C_Pointers>
Ĥ e ▸
O
length: 166 lines: 13
Ln:8 Col:27 Sel: 010
Windows (CRLF)
0 X
UTF-8
4:01 PM
3/11/2019
X
INS
XC:\Users\vgulia\Documents personal_documents\C_Pointers\basic.cpp - Notepad++
File Edit Search View Encoding Language Settings Tools Macro Run Plugins Window ?
UPC
gpu_info.py gpu_info.txt X basic.cpp X
1 #include<stdio.h>
2
34567890123
3
TELE
10
11
12
13
int main()
(
}
C++ source file
int arr [2];
arr [0] = 1;
arr [1] = 2;
printf("%d\n",0 [arr]);
printf("%d\n",1[arr]);
C:\WINDOWS\system32\cmd.exe
1
C:\Users\vgulia\Documents\personal_documents\C_Pointers>g++ basic.cpp -o basic
C:\Users\vgulia\Documents\personal_documents\C_Pointers>basic.exe
ABC
C:\Users\vgulia\Documents\personal_documents\C_Pointers>,
A e ▸ Se
O
length: 166 lines: 13
Ln: 8 Col:27 Sel: 010
Windows (CRLF)
UTF-8
X
4:01 PM
3/11/2019
X
INS
XC:\Users\vgulia\Documents personal_documents\C_Pointers\basic.cpp - Notepad++
File Edit Search View Encoding Language Settings Tools Macro Run Plugins Window ?
UPC
gpu_info.py gpu_info.txt X basic.cpp X
1 #include<stdio.h>
2
34567890123
3
TELE
10
11
12
13
int main()
(
}
C++ source file
int arr [2];
arr [0] = 1;
arr [1] = 2;
printf("%d\n",0 [arr]);
printf("%d\n",1[arr]);
e
C:\WINDOWS\system32\cmd.exe
1
ABC
C:\Users\vgulia\Documents\personal_documents\C_Pointers>g++ basic.cpp -o basic
C:\Users\vgulia\Documents\personal_documents\C_Pointers>basic.exe
C:\Users\vgulia\Documents\personal_documents\C_Pointers>
O
length: 166 lines: 13
Ln: 8 Col:27 Sel: 010
Windows (CRLF)
UTF-8
0
4:01 PM
3/11/2019
X
INS
XC:\Users\vgulia\Documents personal_documents\C_Pointers\basic.cpp - Notepad++
File Edit Search View Encoding Language Settings Tools Macro Run Plugins Window ?
UPC
gpu_info.py gpu_info.txt X basic.cpp X
1 #include<stdio.h>
2
int main ()
(
34567890123
3
TELE
10
11
12
13
}
C++ source file
int arr [2];
arr [0] = 1;
arr [1] = 2;
printf("%d\n",0 [arr]);
printf("%d\n",1[arr]);
e
C:\WINDOWS\system32\cmd.exe
ABC
C:\Users\vgulia\Documents\personal_documents\C_Pointers>g++ basic.cpp -o basic
C:\Users\vgulia\Documents\personal_documents\C_Pointers>basic.exe
C:\Users\vgulia\Documents\personal_documents\C_Pointers>
length: 166 lines: 13
Ln:8 Col:27 Sel: 010
Windows (CRLF)
I
UTF-8
4:01 PM
3/11/2019
X
INS
XAutoSave Off HE
File Home Insert Design Transitions
From From Present Custom Slide
Beginning Current Slide Online- Show-
Start Slide Show
1
2
3
4
DG
Slide 2 of 4
An Uncommon
presentation of
08
M2N8
OG Thank you for watching!
Animations Slide Show Review View Help
Play Narrations
Use Timings
Show Media Controls
Set Up
Slide Show
Hide
Slide
Click to add notes
A e
Rehearse Record Slide
Timings Show
Set Up
uncommon representation_of_array
Storyboarding Tell me what you want to do
Monitor: Automatic
Use Presenter View
Monitors
Int a[9] = a[0]=11 a[1]=12 a[2]=13 a[3]=14 a[4]=15 a[5]=16 a[6]=17|a[7]=18|a[8]=19
1000
1004
1016
1020 1024 1028 1032
Se
a = 1000
Array name(a) contains the base address of
the array(1000).
1008
*1000 ➜ a[0] →→[0]a →11
*(1000+1)→→ *(1004) ➜a[1] →1[a] → 12
*(1000+2)→ *(1008) → a[2] →2[a] →13
*(1000+3)→→ *(1012) ➜a[3] →3[a] →14
*(1000+4)*(1016) → a[4] →4[a] →15
*(1000+5)*(1020) → a[5] →5[a] →16
*(1000+6) →*(1024) → a[6] →6[a] →17
*(1000+7) → *(1028) → a[7] →7[a] →18
*(1000+8) → *(1032) → a[8] ⇒8[a] →19
N
1012
Note: Compiler change both the representation into
pointer form.
Notes
01
88
Vishal Gulia
Share
Comments
+76%
4:01 PM
3/11/2019
«»AutoSave Off 2013
File Home Insert Design Transitions Animations Slide Show Review View Help
Play Narrations
Use Timings
Show Media Controls
From From Present Custom Slide
Beginning Current Slide Online- Show-
Start Slide Show
1
2
3
4
DG
Slide 3 of 4
An Uncommon
presentation of
OG Thank you for watching!
8
Set Up
Slide Show
Hide Rehearse Record Slide
Slide Timings Show-
Set Up
Click to add notes
e
uncommon representation_of_array
Storyboarding Tell me what you want to do
Monitor: Automatic
Use Presenter View
Monitors
Result:
Because compiler converts the array operation in pointers before accessing
the array elements.
So a[1] == 1[a] but a[1] != [1]a, Remember this.
Notes
gl
88
Vishal Gulia
Share
(4¹))
Comments
+76% 3
4:01 PM
3/11/2019