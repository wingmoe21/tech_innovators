0.256 - 0.856:  Hello friends!
1.216 - 2.457: Welcome to GeeksforGeeks.
3.037 - 8.458: In this tutorial, we are going to see how to convert a decimal number into an octal number.
8.918 - 10.759: Let us look at the problem statement.
11.719 - 19.642: Given a decimal number as input, we need to write a program to convert the given decimal number into equivalent octal number.
20.742 - 24.483: That is, convert the number with base value 10 to base value 8.
25.228 - 31.43:  The base value of a number system determines the number of digits used to represent a numeric value.
32.17 - 36.152: For example, the binary number uses 2 digits 0 and 1.
36.752 - 46.335: Octal number system uses 8 digits from 0 to 7 and decimal number system uses 10 digits from 0 to 9 to represent any numeric value.
46.916 - 48.536: Now let us look at the algorithm.
48.976 - 49.256: Step 1.
49.997 - 53.438: Store the remainder when the number is divided by 8 in an array.
54.122 - 54.923:  Step 2.
55.143 - 56.164: Divide the number by 8.
57.184 - 58.125: Step 3.
58.345 - 61.707: Repeat the above two steps until the number is not equal to 0.
62.768 - 63.669: Step 4.
63.889 - 65.89: Reprint the array in reverse order.
66.371 - 68.252: Let us understand this with an example.
68.933 - 70.774: Suppose the decimal number is 33.
71.374 - 72.255: Step 1.
72.755 - 78.279: We store the remainder that is obtained when 33 is divided by 8 into the array, i.e., 1.
79.52 - 80.601: Now, Step 2.
81.101 - 83.283: We divide 33 by 8, which gives 4.
84.312 - 86.893:  As the number is not 0, we continue this step.
86.913 - 92.095: 4 divided by 8 will give quotient 0 and remainder is stored in the array which is 4.
93.115 - 96.796: Now as the number is 0, we print the array in reverse order.
97.256 - 99.877: Therefore, its octal equivalent will be 41.
100.437 - 101.738: Now let us look at the code.
102.158 - 107.78: In the function decimalToOctal, we have passed a decimal number and it prints its octal equivalent.
108.54 - 111.141: Octal number is an array to store the octal number.
111.621 - 113.382: We initialize the counter i with 0.
114.235 - 117.497:  Now we run a while loop until n is not equals to 0.
118.318 - 125.723: First of all, we will find the remainder of n when it is divided by 8 and store it into the ith position of the octal number array.
126.243 - 130.206: Then we will actually divide the number by 8 and increase i by 1.
131.006 - 134.248: These three steps will happen until n is not equals to 0.
134.708 - 138.131: In the end, we will print the octal number array in reverse order.
138.911 - 140.412: Let us see this with an example.
140.953 - 142.333: Let the decimal number be 33.
143.712 - 149.155:  Initially, the octal number array will be empty and the value of i will be initialized with 0.
149.855 - 153.838: As the value of n is not equal to 0, we enter the while loop.
154.158 - 160.141: We store the remainder of n when divided by 8 into the octal number array i.e.
160.161 - 165.604: 33 divided by 8 gives us 1 and we store it in the ith position of the octal number array.
166.324 - 168.005: Now n will be divided by 8 i.e.
168.025 - 169.086: 33 divided by 8 gives us 4.
171.681 - 173.782:  and we increase the value of i by 1.
174.222 - 178.263: As the value of n is still not equal to 0, we continue the while loop.
178.763 - 185.325: Again n modulus 8 that is 4 modulus 8 will give us 4 and we store it in the octal number array.
185.745 - 191.466: Now we divide 4 by 8 which gives us 0 and we increase the value of i by 1 to 2.
192.007 - 199.609: Now as the value of n is equal to 0, we exit the while loop and print the octal number array in reverse order that is 41.
201.135 - 202.558:  I hope you understood the code.
203.018 - 204.0: Thank you for watching.
204.18 - 205.343: Please leave us your comments.
